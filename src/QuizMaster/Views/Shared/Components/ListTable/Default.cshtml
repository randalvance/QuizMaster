@model ListTableComponentViewModel
@using QuizMaster.Common
@using QuizMaster.Common.Extensions
@using QuizMaster.Common.Models
@using System.Net
@inject ISortManager sortManager

@await Component.InvokeAsync("Pager", new { viewModel = Model.PagedViewModel })

@if (Model.ShowAddButton)
{
<a asp-controller="Quiz" asp-action="@Model.AddAction" class="btn btn-success"><span class="glyphicon glyphicon-plus"></span></a>
}

@{ 
    string sortExpression = Model.PagedViewModel.PagingAndSorting.SortExpression;
    var columnInfos = sortManager.ParseSortString(sortExpression);

    Func<List<SortColumnInfo>, string, string> GetNewSortExpression = (columns, columnName) =>
    {
        var columnInfoClone = new List<SortColumnInfo>(columns);
        var columnInfo = columns.SingleOrDefault(c => c.Column == columnName);

        if (columnInfo == null)
        {
            columnInfoClone.Add(new SortColumnInfo(columnName, SortingOrder.Ascending));
        }
        else if (columnInfo.SortingOrder == SortingOrder.Ascending)
        {
            columnInfo.SortingOrder = SortingOrder.Descending;
        }
        else
        {
            columnInfoClone.Remove(columnInfo);
        }
        return sortManager.BuildSortString(columnInfoClone);
    };
}

<table class="table table-responsive table-bordered list-table">
    <thead>
        <tr>
            @foreach (var column in Model.Columns)
            {
                if (!column.Sortable)
                {
                    <th>@column.HeaderText</th>
                }
                else
                {
                    var columnName = ExpressionParser.GetPropertyStringFromExpression(column.PropertyAccessor, Model.ItemType);
                    var columnInfo = columnInfos.SingleOrDefault(x => x.Column == columnName);
                    var isInSortList = columnInfo != null;
                    <th>
                    @if (isInSortList)
                    {
                        <span class="glyphicon @(columnInfo.SortingOrder == SortingOrder.Ascending ? "glyphicon-arrow-up" : "glyphicon-arrow-down")"></span>
                    }
                    <a asp-controller="@Model.Controller" asp-action="@Model.ListAction" 
                       asp-route-page="@Model.PagedViewModel.PagingAndSorting.Page"
                       asp-route-itemsperpage="@Model.PagedViewModel.PagingAndSorting.ItemsPerPage"
                       asp-route-sortexpression="@GetNewSortExpression(columnInfos, columnName)">@column.HeaderText</a>
                    </th>
                }
            }
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Items)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    @if (column.IsDetailLinkColumn)
                    {
                        <td><a asp-controller="@Model.Controller" asp-action="@Model.DetailAction" asp-route-id="@item.GetPropertyValue(Model.IdProperty)">
                            @item.GetPropertyValue(column.PropertyAccessor, Model.ItemType)</a></td>
                    }
                    else if (!string.IsNullOrWhiteSpace(column.Format))
                    {
                        <td>@string.Format($"{{0:{column.Format}}}", item.GetPropertyValue(column.PropertyAccessor, Model.ItemType))</td>
                    }
                    else
                    {
                        <td>@item.GetPropertyValue(column.PropertyAccessor, Model.ItemType)</td>
                    }
                }
                <td>
                    @if (Model.ShowEditButton)
                    {
                    <a style="float: left; margin-right: 10px" asp-controller="@Model.Controller" asp-action="@Model.EditAction" asp-route-id="@item.GetPropertyValue(Model.IdProperty)"><span class="glyphicon glyphicon-pencil"></span></a>
                    }

                    @if (Model.ShowDeleteButton)
                    {
                    <form style="float: left; margin-right: 10px" asp-controller="@Model.Controller" asp-action="@Model.DeleteAction" asp-route-id="@item.GetPropertyValue(Model.IdProperty)" method="post">
                        <a class="delete-button" href="#"><span class="glyphicon glyphicon-trash"></span></a>
                    </form>
                    }

                    @if (Model.Actions != null && Model.Actions.Any())
                    {
                        foreach (var action in Model.Actions)
                        {
                            <a title="@action.Title" 
                               asp-controller="@action.Controller" 
                               asp-action="@action.Action" style="float: left"
                               asp-route-id="@item.GetPropertyValue(action.IdExpression, Model.ItemType)"><span class="@action.IconClass"></span></a>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@await Component.InvokeAsync("Pager", new { viewModel = Model.PagedViewModel })