@model ListTableComponentViewModel
@using QuizMaster.Extensions

@await Component.InvokeAsync("Pager", new { viewModel = Model.PagedViewModel })

<a asp-controller="Quiz" asp-action="Add" class="btn btn-success"><span class="glyphicon glyphicon-plus"></span></a>

<table class="table table-responsive table-bordered list-table">
    <thead>
        <tr>
            @foreach (var column in Model.Columns)
            {
                <th>@column.HeaderText</th>
            }
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Items)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    @if (column.IsDetailLinkColumn)
                    {
                        <td><a asp-controller="@Model.Controller" asp-action="@Model.DetailAction" asp-route-id="@item.GetPropertyValue(Model.IdProperty)">
                            @item.GetPropertyValue(column.PropertyAccessor)</a></td>
                    }
                    else if (!string.IsNullOrWhiteSpace(column.Format))
                    {
                        <td>@string.Format($"{{0:{column.Format}}}", item.GetPropertyValue(column.PropertyAccessor))</td>
                    }
                    else
                    {
                        <td>@item.GetPropertyValue(column.PropertyAccessor)</td>
                    }
                }
                <td>
                    <a style="float: left; margin-right: 10px" asp-controller="@Model.Controller" asp-action="@Model.EditAction" asp-route-id="@item.GetPropertyValue(Model.IdProperty)"><span class="glyphicon glyphicon-pencil"></span></a>

                    <form style="float: left; margin-right: 10px" asp-controller="@Model.Controller" asp-action="@Model.DeleteAction" asp-route-id="@item.GetPropertyValue(Model.IdProperty)" method="post">
                        <a class="delete-button" href="#"><span class="glyphicon glyphicon-trash"></span></a>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

@await Component.InvokeAsync("Pager", new { viewModel = Model.PagedViewModel })